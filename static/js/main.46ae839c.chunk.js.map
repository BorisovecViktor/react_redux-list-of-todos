{"version":3,"sources":["store/index.ts","helpers/api.ts","components/TodosList.tsx","components/Buttons.tsx","App.tsx","index.tsx"],"names":["isLoading","state","loading","isVisibleSortButtons","visibleSortButtons","getVisibleTodos","createSelector","todos","sortField","order","callback","sortDirection","a","b","title","localeCompare","completed","userCatalog","name","sort","initialState","store","createStore","action","type","composeWithDevTools","getTodosFromServer","Promise","all","fetch","then","response","json","todosData","usersData","map","todo","find","user","userId","id","TodosList","dispatch","useDispatch","key","className","cn","todo__completed","onClick","deletedTodo","filter","Buttons","buttonsInit","event","sortType","App","useSelector","handleSort","todosFromServer","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.46ae839c.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createSelector } from 'reselect';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst DELETE_TODO = 'DELETE_TODO';\nconst SET_SORT_FIELD = 'SET_SORT_FIELD';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (todos: Todo[]) => ({\n  type: FINISH_LOADING,\n  todos,\n});\nexport const deletedTodo = (todos: Todo[]) => ({\n  type: DELETE_TODO,\n  todos,\n});\nexport const setSortField = (sortField: string) => ({\n  type: SET_SORT_FIELD,\n  sortField,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortType = (state: RootState) => state.sortField;\nexport const isLoading = (state: RootState) => state.loading;\nexport const isVisibleSortButtons = (state: RootState) => state.visibleSortButtons;\nexport const getOrder = (state: RootState) => state.order;\nexport const getVisibleTodos = createSelector(\n  getTodos,\n  getSortType,\n  getOrder,\n\n  (todos: Todo[], sortField: string, order: string) => {\n    let callback: (a: Todo, b: Todo) => number;\n    const sortDirection = (order === 'ASC') ? 1 : -1;\n\n    switch (sortField) {\n      case 'title':\n        callback = (a, b) => (a.title.localeCompare(b.title)* sortDirection);\n        break;\n      case 'complete':\n        callback = (a, b) => (+a.completed - +b.completed)* sortDirection;\n        break;\n      case 'user':\n        callback = (a, b) => (a.userCatalog.name.localeCompare(b.userCatalog.name))* sortDirection;\n        break;\n      default: callback = () => 0;\n    }\n\n    const visiblePeople = [...todos].sort(callback);\n\n    return visiblePeople;\n  }\n)\n\n// Initial state\nexport type RootState = {\n  todos: Todo[],\n  loading: boolean;\n  visibleSortButtons: boolean,\n  sortField: string,\n  order: string;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  visibleSortButtons: false,\n  sortField: '',\n  order: 'ASC',\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        visibleSortButtons: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        todos: action.todos,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SET_SORT_FIELD:\n      if (state.sortField === action.sortField) {\n        return {\n          ...state,\n          order: state.order === 'ASC' ? 'DESC' : 'ASC',\n        };\n      }\n      return {\n        ...state,\n        order: 'ASC',\n        sortField: action.sortField,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API__URL__TODOS = 'https://jsonplaceholder.typicode.com/todos';\nconst API__URL__USERS = 'https://jsonplaceholder.typicode.com/users';\n\nconst todos = () => {\n  return fetch(`${API__URL__TODOS}`)\n    .then(response => response.json());\n};\n\nconst users = () => {\n  return fetch(`${API__URL__USERS}`)\n    .then(response => response.json());\n};\n\nexport const getTodosFromServer = async () => {\n  const [todosData, usersData] = await Promise.all([todos(), users()]);\n\n  return todosData.map((todo: TodoFromServer) => {\n    const userCatalog = usersData.find((user: UserFromServer) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      userCatalog,\n    };\n  });\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\n\nimport { deletedTodo } from '../store';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodosList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  const deleteTodo = (id: number) => {\n    dispatch(deletedTodo(todos.filter(todo => todo.id !== id)));\n  }\n\n  return (\n    <>\n      {todos.map(todo => (\n        <div\n          key={todo.id}\n          className={cn('todo__item', {\n            todo__completed: todo.completed,\n          })}\n        >\n          <p className=\"todo__title\">\n            {todo.title}\n          </p>\n          <p>\n            {todo.userCatalog.name}\n          </p>\n          <p>\n            {todo.completed ? 'completed' : 'not completed'}\n          </p>\n          <button\n            type=\"button\"\n            className=\"todo__button todo__button--delete\"\n            onClick={() => deleteTodo(todo.id)}\n          >\n            Delete todo\n          </button>\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  buttonsInit: Button[];\n};\n\nexport const Buttons: React.FC<Props> = ({ buttonsInit }) => {\n  return (\n    <div className=\"todo__buttons\">\n      {buttonsInit.map(({ id, title, event, sortType }) => (\n        <button\n          type=\"button\"\n          key={id}\n          className=\"todo__button todo__button--sort\"\n          onClick={() => event(sortType)}\n        >\n          {title}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodosFromServer } from './helpers/api';\n\nimport './App.scss';\nimport { TodosList } from './components/TodosList';\nimport { Buttons } from './components/Buttons';\n\nimport {\n  startLoading,\n  finishLoading,\n  isLoading,\n  isVisibleSortButtons,\n  getVisibleTodos,\n  setSortField,\n} from './store';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getVisibleTodos);\n  const loading = useSelector(isLoading);\n  const visibleSortButtons = useSelector(isVisibleSortButtons);\n\n  const handleGetTodos = () => {\n    dispatch(startLoading());\n    getTodosFromServer()\n      .then(todosFromServer => dispatch(finishLoading(todosFromServer)));\n  };\n\n  const handleSort = (sortType: string) => {\n    dispatch(setSortField(sortType));\n  };\n\n  const buttonsInit: Button[] = [\n    { id: 1, title: 'Sort by title', event: handleSort, sortType: 'title' },\n    { id: 2, title: 'Sort by complete', event: handleSort, sortType: 'complete' },\n    { id: 3, title: 'Sort by user', event: handleSort, sortType: 'user' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {\n        visibleSortButtons\n          ? <Buttons buttonsInit={buttonsInit} />\n          : <button\n            type=\"button\"\n            className=\"todo__button\"\n            onClick={handleGetTodos}\n          >\n            Load Todos\n          </button>\n      }\n      {loading\n        ? (\n          <div className=\"lds-ellipsis\">\n            <div />\n            <div />\n            <div />\n            <div />\n          </div>\n        )\n        :\n        <TodosList todos={todos} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}