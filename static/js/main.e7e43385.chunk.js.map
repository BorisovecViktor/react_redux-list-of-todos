{"version":3,"sources":["store/index.ts","helpers/api.ts","components/TodosList.tsx","components/Buttons.tsx","App.tsx","index.tsx"],"names":["sortedTodos","todos","type","getTodos","state","isLoading","loading","isVisibleSortButtons","visibleSortButtons","initialState","store","createStore","action","composeWithDevTools","getTodosFromServer","a","Promise","all","fetch","then","response","json","todosData","usersData","map","todo","userCatalog","find","user","userId","id","TodosList","dispatch","useDispatch","key","className","cn","todo__completed","completed","title","name","onClick","deletedTodo","filter","Buttons","buttonsInit","event","sortType","App","useSelector","handleSort","sort","b","localeCompare","todosFromServer","finishLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"+RAeaA,EAAc,SAACC,GAAD,MAAoB,CAC7CC,KAViB,aAWjBD,UAQWE,EAAW,SAACC,GAAD,OAAsBA,EAAMH,OACvCI,EAAY,SAACD,GAAD,OAAsBA,EAAME,SACxCC,EAAuB,SAACH,GAAD,OAAsBA,EAAMI,oBAS1DC,EAA0B,CAC9BR,MAAO,GACPK,SAAS,EACTE,oBAAoB,GA2CPE,EALDC,uBAlCM,WAA8C,IAA7CP,EAA4C,uDAApCK,EAAcG,EAAsB,uCAC/D,OAAQA,EAAOV,MACb,IAzCkB,gBA0ChB,OAAO,2BACFE,GADL,IAEEE,SAAS,EACTE,oBAAoB,IAGxB,IA/CmB,iBAgDjB,OAAO,2BACFJ,GADL,IAEEE,SAAS,EACTL,MAAM,YAAKW,EAAOX,SAGtB,IArDe,aA2Df,IA1DgB,cA2Dd,OAAO,2BACFG,GADL,IAEEH,MAAM,YAAKW,EAAOX,SAGtB,QACE,OAAOG,KAOXS,iC,iCClEWC,EAAkB,uCAAG,kCAAAC,EAAA,sEACKC,QAAQC,IAAI,CAV1CC,MAAM,GAAD,OAJU,+CAKnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAItBH,MAAM,GAAD,OARU,+CASnBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAGG,0CACzBC,EADyB,KACdC,EADc,uBAGzBD,EAAUE,KAAI,SAACC,GACpB,IAAMC,EAAcH,EAAUI,MAAK,SAACC,GAAD,OAA0BH,EAAKI,SAAWD,EAAKE,MAElF,OAAO,2BACFL,GADL,IAEEC,oBAR4B,2CAAH,qD,yBCHlBK,EAA6B,SAAC,GAAe,IAAb9B,EAAY,EAAZA,MACrC+B,EAAWC,cAMjB,OACE,oCACGhC,EAAMuB,KAAI,SAAAC,GAAI,OACb,yBACES,IAAKT,EAAKK,GACVK,UAAWC,IAAG,aAAc,CAC1BC,gBAAiBZ,EAAKa,aAGxB,uBAAGH,UAAU,eACVV,EAAKc,OAER,2BACGd,EAAKC,YAAYc,MAEpB,2BACGf,EAAKa,UAAY,YAAc,iBAElC,4BACEpC,KAAK,SACLiC,UAAU,oCACVM,QAAS,kBAzBCX,EAyBgBL,EAAKK,QAxBvCE,EFKuB,SAAC/B,GAAD,MAAoB,CAC7CC,KAbkB,cAclBD,SEPWyC,CAAYzC,EAAM0C,QAAO,SAAAlB,GAAI,OAAIA,EAAKK,KAAOA,OADrC,IAACA,IAsBZ,qBC7BGc,EAA2B,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACzC,OACE,yBAAKV,UAAU,iBACZU,EAAYrB,KAAI,gBAAGM,EAAH,EAAGA,GAAIS,EAAP,EAAOA,MAAOO,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,SAArB,OACf,4BACE7C,KAAK,SACLgC,IAAKJ,EACLK,UAAU,kCACVM,QAAS,kBAAMK,EAAMC,KAEpBR,QCmEIS,EAjEH,WACV,IAAMhB,EAAWC,cACXhC,EAAQgD,YAAY9C,GACpBG,EAAU2C,YAAY5C,GACtBG,EAAqByC,YAAY1C,GAQjC2C,EAAa,SAACH,GAClB,OAAQA,GACN,IAAK,QACHf,EAAShC,EAAYC,EAAMkD,MAAK,SAACpC,EAAGqC,GAAJ,OAC9BrC,EAAEwB,MAAMc,cAAcD,EAAEb,YACpB,MACR,IAAK,WACHP,EAAShC,EAAYC,EAAMkD,MAAK,SAACpC,EAAGqC,GAAJ,OAC7BrC,EAAEuB,WAAac,EAAEd,eACd,MACR,IAAK,OACHN,EAAShC,EAAYC,EAAMkD,MAAK,SAACpC,EAAGqC,GAAJ,OAC9BrC,EAAEW,YAAYc,KAAKa,cAAcD,EAAE1B,YAAYc,WAC3C,MACR,QAASR,EAAShC,EAAYC,MAI5B4C,EAAwB,CAC5B,CAAEf,GAAI,EAAGS,MAAO,gBAAiBO,MAAOI,EAAYH,SAAU,SAC9D,CAAEjB,GAAI,EAAGS,MAAO,mBAAoBO,MAAOI,EAAYH,SAAU,YACjE,CAAEjB,GAAI,EAAGS,MAAO,eAAgBO,MAAOI,EAAYH,SAAU,SAG/D,OACE,yBAAKZ,UAAU,OACb,mDAEE3B,EACI,kBAAC,EAAD,CAASqC,YAAaA,IACtB,4BACA3C,KAAK,SACLiC,UAAU,eACVM,QAvCa,WACrBT,EJf+B,CAAE9B,KANf,kBIsBlBY,IACGK,MAAK,SAAAmC,GAAe,OAAItB,EJhBF,SAAC/B,GAAD,MAAoB,CAC/CC,KAPqB,iBAQrBD,SIcsCsD,CAAcD,SAiC1C,cAQLhD,EAEG,yBAAK6B,UAAU,gBACb,8BACA,8BACA,8BACA,+BAIJ,kBAAC,EAAD,CAAWlC,MAAOA,MCpEpBuD,EAAO,kBACX,kBAAC,IAAD,CAAU9C,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN+C,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.e7e43385.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_TODOS = 'SORT_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\n\n// Action creators - a function returning an action object\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = (todos: Todo[]) => ({\n  type: FINISH_LOADING,\n  todos,\n});\nexport const sortedTodos = (todos: Todo[]) => ({\n  type: SORT_TODOS,\n  todos,\n});\nexport const deletedTodo = (todos: Todo[]) => ({\n  type: DELETE_TODO,\n  todos,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getTodos = (state: RootState) => state.todos;\nexport const isLoading = (state: RootState) => state.loading;\nexport const isVisibleSortButtons = (state: RootState) => state.visibleSortButtons;\n\n// Initial state\nexport type RootState = {\n  todos: Todo[],\n  loading: boolean;\n  visibleSortButtons: boolean,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  visibleSortButtons: false,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return {\n        ...state,\n        loading: true,\n        visibleSortButtons: true,\n      };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        todos: [...action.todos],\n      };\n\n    case SORT_TODOS:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: [...action.todos],\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API__URL__TODOS = 'https://jsonplaceholder.typicode.com/todos';\nconst API__URL__USERS = 'https://jsonplaceholder.typicode.com/users';\n\nconst todos = () => {\n  return fetch(`${API__URL__TODOS}`)\n    .then(response => response.json());\n};\n\nconst users = () => {\n  return fetch(`${API__URL__USERS}`)\n    .then(response => response.json());\n};\n\nexport const getTodosFromServer = async () => {\n  const [todosData, usersData] = await Promise.all([todos(), users()]);\n\n  return todosData.map((todo: TodoFromServer) => {\n    const userCatalog = usersData.find((user: UserFromServer) => todo.userId === user.id);\n\n    return {\n      ...todo,\n      userCatalog,\n    };\n  });\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\n\nimport { deletedTodo } from '../store';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodosList: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  const deleteTodo = (id: number) => {\n    dispatch(deletedTodo(todos.filter(todo => todo.id !== id)));\n  }\n\n  return (\n    <>\n      {todos.map(todo => (\n        <div\n          key={todo.id}\n          className={cn('todo__item', {\n            todo__completed: todo.completed,\n          })}\n        >\n          <p className=\"todo__title\">\n            {todo.title}\n          </p>\n          <p>\n            {todo.userCatalog.name}\n          </p>\n          <p>\n            {todo.completed ? 'completed' : 'not completed'}\n          </p>\n          <button\n            type=\"button\"\n            className=\"todo__button todo__button--delete\"\n            onClick={() => deleteTodo(todo.id)}\n          >\n            Delete todo\n          </button>\n        </div>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  buttonsInit: Button[];\n};\n\nexport const Buttons: React.FC<Props> = ({ buttonsInit }) => {\n  return (\n    <div className=\"todo__buttons\">\n      {buttonsInit.map(({ id, title, event, sortType }) => (\n        <button\n          type=\"button\"\n          key={id}\n          className=\"todo__button todo__button--sort\"\n          onClick={() => event(sortType)}\n        >\n          {title}\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTodosFromServer } from './helpers/api';\n\nimport './App.scss';\nimport { TodosList } from './components/TodosList';\nimport { Buttons } from './components/Buttons';\n\nimport {\n  startLoading,\n  finishLoading,\n  isLoading,\n  isVisibleSortButtons,\n  getTodos,\n  sortedTodos\n} from './store';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(getTodos);\n  const loading = useSelector(isLoading);\n  const visibleSortButtons = useSelector(isVisibleSortButtons);\n\n  const handleGetTodos = () => {\n    dispatch(startLoading());\n    getTodosFromServer()\n      .then(todosFromServer => dispatch(finishLoading(todosFromServer)));\n  };\n\n  const handleSort = (sortType: string) => {\n    switch (sortType) {\n      case 'title':\n        dispatch(sortedTodos(todos.sort((a, b) => (\n          a.title.localeCompare(b.title)\n        )))); break;\n      case 'complete':\n        dispatch(sortedTodos(todos.sort((a, b) => (\n          +a.completed - +b.completed\n        )))); break;\n      case 'user':\n        dispatch(sortedTodos(todos.sort((a, b) => (\n          a.userCatalog.name.localeCompare(b.userCatalog.name)\n        )))); break;\n      default: dispatch(sortedTodos(todos));\n    }\n  };\n\n  const buttonsInit: Button[] = [\n    { id: 1, title: 'Sort by title', event: handleSort, sortType: 'title' },\n    { id: 2, title: 'Sort by complete', event: handleSort, sortType: 'complete' },\n    { id: 3, title: 'Sort by user', event: handleSort, sortType: 'user' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {\n        visibleSortButtons\n          ? <Buttons buttonsInit={buttonsInit} />\n          : <button\n            type=\"button\"\n            className=\"todo__button\"\n            onClick={handleGetTodos}\n          >\n            Load Todos\n          </button>\n      }\n      {loading\n        ? (\n          <div className=\"lds-ellipsis\">\n            <div />\n            <div />\n            <div />\n            <div />\n          </div>\n        )\n        :\n        <TodosList todos={todos} />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}